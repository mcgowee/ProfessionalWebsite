import { c as create_ssr_component, l as each, h as add_attribute, k as escape } from "../../../chunks/ssr.js";
/* empty css                                                    */
const css = {
  code: "main.svelte-obi4o8{font-family:Arial, sans-serif}.user-message.svelte-obi4o8{text-align:right;color:blue}.ai-message.svelte-obi4o8{text-align:left;color:green}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\r\\n  import Spinner from '../../components/Spinner.svelte';\\r\\n  \\r\\n  let messages = [];\\r\\n  let userInput = '';\\r\\n  let isLoading = false;\\r\\n\\r\\n  async function sendMessage() {\\r\\n    if (userInput.trim()) {\\r\\n      // Add user message to the chat\\r\\n      messages = [...messages, { sender: 'User', text: userInput }];\\r\\n      isLoading = true;\\r\\n\\r\\n      try {\\r\\n        // Make the POST request to the Flask API\\r\\n        const response = await fetch('https://0aa9efc95e9f.ngrok.app/modify_text', {\\r\\n          method: 'POST',\\r\\n          headers: {\\r\\n            'Content-Type': 'application/json'\\r\\n          },\\r\\n          body: JSON.stringify({ text: userInput })\\r\\n        });\\r\\n\\r\\n        if (response.ok) {\\r\\n          const data = await response.json();\\r\\n          // Add AI response to the chat\\r\\n          messages = [...messages, { sender: 'AI', text: data.modified_text }];\\r\\n        } else {\\r\\n          // Handle response errors\\r\\n          messages = [...messages, { sender: 'AI', text: 'Failed to get a response from the server.' }];\\r\\n        }\\r\\n      } catch (error) {\\r\\n        // Handle network errors\\r\\n        messages = [...messages, { sender: 'AI', text: 'An error occurred while communicating with the server.' }];\\r\\n      } finally {\\r\\n        isLoading = false;\\r\\n      }\\r\\n\\r\\n      // Clear the input field\\r\\n      userInput = '';\\r\\n    }\\r\\n  }\\r\\n<\/script>\\r\\n\\r\\n<main class=\\"p-6 bg-white rounded-lg shadow-lg mt-8\\">\\r\\n  <h2 class=\\"text-3xl font-semibold mb-4 text-gray-800\\">Chat with Earl</h2>\\r\\n  <p class=\\"mb-4 text-gray-600\\">\\r\\n    <strong>This is a simple chat using <span class=\\"text-indigo-500\\">Svelte</span> on the front end and <span class=\\"text-green-500\\">Flask</span> as an API AI agent on the backend.</strong>\\r\\n    It utilizes <strong>Ollama</strong> and <strong>Llama3</strong> for AI responses. \\r\\n    <span class=\\"text-red-500 font-bold\\">This is an initial prototype.</span> A <span class=\\"text-blue-500 font-bold\\">Retrieval-Augmented Generation (RAG)</span> backend with data retrieved from my social media, documents, and other sources \\r\\n    is being created <span class=\\"text-yellow-500\\">(In Construction)</span>. Additionally, a <span class=\\"text-purple-500 font-bold\\">SQL AI agent</span> is being developed that can query databases and return analytics based on <span class=\\"text-orange-500 font-bold\\">SQL Question and Answer AI Chaining</span>.\\r\\n  </p>\\r\\n  <div class=\\"chat-window border border-gray-300 p-4 h-80 overflow-y-auto mb-4 rounded-lg bg-gray-50\\">\\r\\n    {#each messages as { sender, text }, i}\\r\\n      <div class=\\"{sender.toLowerCase()}-message mb-2\\">\\r\\n        <strong>{sender}:</strong> {text}\\r\\n      </div>\\r\\n    {/each}\\r\\n    {#if isLoading}\\r\\n      <div class=\\"flex justify-center items-center mt-2\\">\\r\\n        <Spinner />\\r\\n      </div>\\r\\n    {/if}\\r\\n  </div>\\r\\n  <div class=\\"flex\\">\\r\\n    <input bind:value={userInput} on:keydown={(e) => e.key === 'Enter' && sendMessage()} placeholder=\\"Type your message...\\" class=\\"flex-grow p-2 border border-gray-300 rounded-lg mr-2\\" />\\r\\n    <button on:click={sendMessage} class=\\"p-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600\\">Send</button>\\r\\n  </div>\\r\\n</main>\\r\\n\\r\\n<style>\\r\\n  main {\\r\\n    font-family: Arial, sans-serif;\\r\\n  }\\r\\n  \\r\\n  .user-message {\\r\\n    text-align: right;\\r\\n    color: blue;\\r\\n  }\\r\\n  \\r\\n  .ai-message {\\r\\n    text-align: left;\\r\\n    color: green;\\r\\n  }\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAuEE,kBAAK,CACH,WAAW,CAAE,KAAK,CAAC,CAAC,UACtB,CAEA,2BAAc,CACZ,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,IACT,CAEA,yBAAY,CACV,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KACT"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let messages = [];
  let userInput = "";
  $$result.css.add(css);
  return `<main class="p-6 bg-white rounded-lg shadow-lg mt-8 svelte-obi4o8"><h2 class="text-3xl font-semibold mb-4 text-gray-800" data-svelte-h="svelte-no7zzj">Chat with Earl</h2> <p class="mb-4 text-gray-600" data-svelte-h="svelte-1tap261"><strong>This is a simple chat using <span class="text-indigo-500">Svelte</span> on the front end and <span class="text-green-500">Flask</span> as an API AI agent on the backend.</strong>
    It utilizes <strong>Ollama</strong> and <strong>Llama3</strong> for AI responses. 
    <span class="text-red-500 font-bold">This is an initial prototype.</span> A <span class="text-blue-500 font-bold">Retrieval-Augmented Generation (RAG)</span> backend with data retrieved from my social media, documents, and other sources 
    is being created <span class="text-yellow-500">(In Construction)</span>. Additionally, a <span class="text-purple-500 font-bold">SQL AI agent</span> is being developed that can query databases and return analytics based on <span class="text-orange-500 font-bold">SQL Question and Answer AI Chaining</span>.</p> <div class="chat-window border border-gray-300 p-4 h-80 overflow-y-auto mb-4 rounded-lg bg-gray-50">${each(messages, ({ sender, text }, i) => {
    return `<div class="${escape(sender.toLowerCase(), true) + "-message mb-2 svelte-obi4o8"}"><strong>${escape(sender)}:</strong> ${escape(text)} </div>`;
  })} ${``}</div> <div class="flex"><input placeholder="Type your message..." class="flex-grow p-2 border border-gray-300 rounded-lg mr-2"${add_attribute("value", userInput, 0)}> <button class="p-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600" data-svelte-h="svelte-1uccyc0">Send</button></div> </main>`;
});
export {
  Page as default
};
