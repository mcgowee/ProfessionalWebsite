import {
  CommonIcon,
  CommonLabel,
  SmuiElement,
  classMap,
  dispatch,
  dist_default,
  useActions
} from "./chunk-TP3TIDAL.js";
import "./chunk-HDMSCP4O.js";
import "./chunk-TYPVE3OT.js";
import "./chunk-FEV7F3XG.js";
import "./chunk-VLDWWRHJ.js";
import "./chunk-KV6YONZ4.js";
import "./chunk-AJXDWY74.js";
import "./chunk-M43EPEYU.js";
import "./chunk-KD76FVNN.js";
import "./chunk-FAAUIAXH.js";
import "./chunk-RWE47MHO.js";
import {
  action,
  add_locations,
  bind_this,
  check_target,
  component,
  if_block,
  legacy_api,
  prop,
  rest_props,
  set_attributes,
  snippet,
  spread_props,
  validate_prop_bindings,
  wrap_snippet
} from "./chunk-HZ3ZBA3K.js";
import {
  FILENAME,
  append,
  child,
  comment,
  derived,
  equals,
  first_child,
  get,
  getContext,
  mark_module_end,
  mark_module_start,
  noop,
  pop,
  proxy,
  push,
  reset,
  setContext,
  sibling,
  strict_equals,
  template,
  template_effect,
  user_effect
} from "./chunk-C3ERE2HV.js";
import "./chunk-633S47UX.js";
import "./chunk-M4H726CL.js";

// node_modules/@smui/button/dist/Button.svelte
mark_module_start();
Button[FILENAME] = "node_modules/@smui/button/dist/Button.svelte";
var root_2 = add_locations(template(`<div class="mdc-button__touch"></div>`), Button[FILENAME], [[54, 35]]);
var root_1 = add_locations(template(`<div class="mdc-button__ripple"></div> <!><!>`, 1), Button[FILENAME], [[53, 3]]);
function Button($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Button);
  validate_prop_bindings($$props, [], ["getElement"], Button);
  let use = prop($$props, "use", 19, () => []), className = prop($$props, "class", 3, ""), style = prop($$props, "style", 3, ""), ripple = prop($$props, "ripple", 3, true), color = prop($$props, "color", 3, "primary"), variant = prop($$props, "variant", 3, "text"), touch = prop($$props, "touch", 3, false), action2 = prop($$props, "action", 3, "close"), defaultAction = prop($$props, "defaultAction", 3, false), secondary = prop($$props, "secondary", 3, false), MyComponent = prop($$props, "component", 3, SmuiElement), tag = prop($$props, "tag", 19, () => equals($$props.href, null) ? "button" : "a"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "use",
      "class",
      "style",
      "ripple",
      "color",
      "variant",
      "touch",
      "href",
      "action",
      "defaultAction",
      "secondary",
      "component",
      "tag",
      "children"
    ],
    "restProps"
  );
  let element;
  let internalClasses = proxy({});
  let internalStyles = proxy({});
  let context = getContext("SMUI:button:context");
  const actionProp = derived(() => strict_equals(context, "dialog:action") && equals(action2(), null, false) ? { "data-mdc-dialog-action": action2() } : { action: action2() });
  const defaultProp = derived(() => strict_equals(context, "dialog:action") && defaultAction() ? { "data-mdc-dialog-button-default": "" } : {});
  const secondaryProp = derived(() => strict_equals(context, "banner") ? {} : { secondary: secondary() });
  let previousDisabled = $$props.disabled;
  user_effect(() => {
    if (strict_equals(previousDisabled, $$props.disabled, false)) {
      if (element) {
        const el = getElement();
        if ("blur" in el) {
          el.blur();
        }
      }
      previousDisabled = restProps.disabled;
    }
  });
  setContext("SMUI:label:context", "button");
  setContext("SMUI:icon:context", "button");
  function addClass(className2) {
    if (!internalClasses[className2]) {
      internalClasses[className2] = true;
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      internalClasses[className2] = false;
    }
  }
  function addStyle(name, value) {
    if (equals(internalStyles[name], value, false)) {
      if (strict_equals(value, "") || equals(value, null)) {
        delete internalStyles[name];
      } else {
        internalStyles[name] = value;
      }
    }
  }
  function handleClick() {
    if (strict_equals(context, "banner")) {
      dispatch(getElement(), secondary() ? "SMUIBannerButtonSecondaryActionClick" : "SMUIBannerButtonPrimaryActionClick");
    }
  }
  function getElement() {
    return element.getElement();
  }
  var fragment = comment();
  var node = first_child(fragment);
  var use_1 = derived(() => [
    [
      dist_default,
      {
        ripple: ripple(),
        unbounded: false,
        color: color(),
        disabled: !!$$props.disabled,
        addClass,
        removeClass,
        addStyle
      }
    ],
    ...use()
  ]);
  var class_1 = derived(() => classMap({
    [className()]: true,
    "mdc-button": true,
    "mdc-button--raised": strict_equals(variant(), "raised"),
    "mdc-button--unelevated": strict_equals(variant(), "unelevated"),
    "mdc-button--outlined": strict_equals(variant(), "outlined"),
    "smui-button--color-secondary": strict_equals(color(), "secondary"),
    "mdc-button--touch": touch(),
    "mdc-card__action": strict_equals(context, "card:action"),
    "mdc-card__action--button": strict_equals(context, "card:action"),
    "mdc-dialog__button": strict_equals(context, "dialog:action"),
    "mdc-top-app-bar__navigation-icon": strict_equals(context, "top-app-bar:navigation"),
    "mdc-top-app-bar__action-item": strict_equals(context, "top-app-bar:action"),
    "mdc-snackbar__action": strict_equals(context, "snackbar:actions"),
    "mdc-banner__secondary-action": strict_equals(context, "banner") && secondary(),
    "mdc-banner__primary-action": strict_equals(context, "banner") && !secondary(),
    "mdc-tooltip__action": strict_equals(context, "tooltip:rich-actions"),
    ...internalClasses
  }));
  var style_1 = derived(() => Object.entries(internalStyles).map(([name, value]) => `${name}: ${value};`).concat([style()]).join(" "));
  component(node, MyComponent, ($$anchor2, $$component) => {
    bind_this(
      $$component($$anchor2, spread_props(
        {
          get tag() {
            return tag();
          },
          get use() {
            return get(use_1);
          },
          get class() {
            return get(class_1);
          },
          get style() {
            return get(style_1);
          }
        },
        () => get(actionProp),
        () => get(defaultProp),
        () => get(secondaryProp),
        {
          get href() {
            return $$props.href;
          }
        },
        () => restProps,
        {
          onclick: (e) => {
            var _a;
            handleClick();
            (_a = $$props.onclick) == null ? void 0 : _a.call($$props, e);
          },
          children: wrap_snippet(Button, ($$anchor3, $$slotProps) => {
            var fragment_1 = root_1();
            var node_1 = sibling(first_child(fragment_1), 2);
            snippet(node_1, () => $$props.children ?? noop);
            var node_2 = sibling(node_1);
            {
              var consequent = ($$anchor4) => {
                var div = root_2();
                append($$anchor4, div);
              };
              if_block(node_2, ($$render) => {
                if (touch()) $$render(consequent);
              });
            }
            append($$anchor3, fragment_1);
          }),
          $$slots: { default: true }
        }
      )),
      ($$value) => element = $$value,
      () => element
    );
  });
  append($$anchor, fragment);
  return pop({
    get getElement() {
      return getElement;
    },
    ...legacy_api()
  });
}
mark_module_end(Button);

// node_modules/@smui/button/dist/Group.svelte
mark_module_start();
Group[FILENAME] = "node_modules/@smui/button/dist/Group.svelte";
var root = add_locations(template(`<div><!></div>`), Group[FILENAME], [[3, 0]]);
function Group($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Group);
  validate_prop_bindings($$props, [], ["getElement"], Group);
  let use = prop($$props, "use", 19, () => []), className = prop($$props, "class", 3, ""), variant = prop($$props, "variant", 3, "text"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "use",
      "class",
      "variant",
      "children"
    ],
    "restProps"
  );
  let element;
  function getElement() {
    return element;
  }
  var div = root();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children ?? noop);
  reset(div);
  bind_this(div, ($$value) => element = $$value, () => element);
  action(div, ($$node, $$action_arg) => {
    var _a;
    return (_a = useActions) == null ? void 0 : _a($$node, $$action_arg);
  }, use);
  template_effect(() => attributes = set_attributes(div, attributes, {
    class: classMap({
      [className()]: true,
      "smui-button__group": true,
      "smui-button__group--raised": strict_equals(variant(), "raised")
    }),
    ...restProps
  }));
  append($$anchor, div);
  return pop({
    get getElement() {
      return getElement;
    },
    ...legacy_api()
  });
}
mark_module_end(Group);

// node_modules/@smui/button/dist/GroupItem.js
function GroupItem(node, { addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className) } = {}) {
  addClass("smui-button__group-item");
  return {
    destroy() {
      removeClass("smui-button__group-item");
    }
  };
}

// node_modules/@smui/button/dist/index.js
var dist_default2 = Button;
export {
  Group,
  GroupItem,
  CommonIcon as Icon,
  CommonLabel as Label,
  dist_default2 as default
};
//# sourceMappingURL=@smui_button.js.map
