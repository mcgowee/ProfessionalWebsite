import { on } from 'svelte/events';
export class SvelteEventManager {
    constructor() {
        this.elementMap = new Map();
    }
    on(element, event, handler) {
        if (!this.elementMap.has(element)) {
            this.elementMap.set(element, {});
        }
        const eventMap = this.elementMap.get(element);
        if (eventMap == null) {
            throw new Error("Event map couldn't be created.");
        }
        if (!(event in eventMap)) {
            eventMap[event] = new Map();
        }
        const handlerMap = eventMap[event];
        handlerMap.set(handler, on(element, event, handler));
    }
    off(element, event, handler) {
        const eventMap = this.elementMap.get(element);
        if (eventMap == null || !(event in eventMap)) {
            return;
        }
        const handlerMap = eventMap[event];
        const unlisten = handlerMap.get(handler);
        if (unlisten != null) {
            unlisten();
            handlerMap.delete(handler);
            if (handlerMap.size === 0) {
                delete eventMap[event];
                if (Object.keys(eventMap).length === 0) {
                    this.elementMap.delete(element);
                }
            }
        }
    }
}
//# sourceMappingURL=SvelteEventManager.js.map